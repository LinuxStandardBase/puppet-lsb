#
# VirtualHost template
# Note: to use the template, rename it to /etc/apache2/vhost.d/yourvhost.conf. 
# Files must have the .conf suffix to be loaded.
#
# See /usr/share/doc/packages/apache2/README.QUICKSTART for further hints 
# about virtual hosts.
#
# NameVirtualHost statements can be added to /etc/apache2/listen.conf.
#
# Almost any Apache directive may go into a VirtualHost container.
# The first VirtualHost section is used for requests without a known
# server name.
#
<VirtualHost *:80>
    ServerAdmin webmaster@linuxbase.org
    ServerName www.linuxbase.org
    ServerAlias linuxbase.org

    DocumentRoot /srv/www/vhosts/linuxbase.org

    ErrorLog /var/log/apache2/linuxbase.org-error_log
    CustomLog /var/log/apache2/linuxbase.org-access_log combined

    HostnameLookups Off
    UseCanonicalName Off
    ServerSignature On

    #ScriptAlias /cgi-bin/ "/srv/www/vhosts/dummy-host.example.com/cgi-bin/"

    #<Directory "/srv/www/vhosts/linuxbase.org/cgi-bin">
#	AllowOverride None
#	Options +ExecCGI -Includes
#	Order allow,deny
#	Allow from all
    #</Directory>


    <IfModule mod_userdir.c>
	UserDir public_html
	#AliasMatch ^/users/([a-zA-Z0-9-_.]*)/?(.*) /home/$1/public_html/$2
    </IfModule>


    <Directory "/srv/www/vhosts/linuxbase.org">
	Options Indexes FollowSymLinks
	AllowOverride None
	Order allow,deny
	Allow from all
    </Directory>

    RewriteEngine on

    # For now, just redirect the top page to the workgroup.
    RewriteRule ^/?$ https://www.linuxfoundation.org/collaborate/workgroups/lsb

    # This link was mentioned in some FHS announcements for 3.0 beta.
    RewriteRule ^/~licquia/fhs-3.0-drafts /betaspecs/fhs [L,R=301]

    # spec

    RewriteRule ^/spec http://refspecs.linuxfoundation.org/lsb.shtml [L,R=301]

    # cert system

    RewriteRule ^/lsb-cert(.*)$ https://www.linuxbase.org/lsb-cert$1 [L,R=301]

    # Navigator

    Alias /dbadmin /data/www/modules/dbadmin
    Alias /navigator /data/www/modules/dbadmin

    <Directory /data/www/modules/dbadmin>
       Options +FollowSymLinks
       AllowOverride All
       order allow,deny
       allow from all

       # included files (especially config/connection.inc, which contains
       # site-specific passwords!!!) only need to be readable by the application,
       # not over the web, so mask them out
       <FilesMatch "\.inc$">
          Order allow,deny
          allow from 127
          deny from all
       </FilesMatch>
    </Directory>

    RewriteRule ^/(navigator|dbadmin)/admin(_community)?(.*) https://www.linuxbase.org/navigator/admin$2$3 [L,R=301]

    # download app

    ProxyPass /download http://localhost:7248
    ProxyPassReverse /download http://localhost:7248

    <Location /download>
        Order allow,deny
        Allow from all
    </Location>

    # buildbot

    RewriteRule ^/buildbot$ /buildbot/ [L,R=301]

    ProxyPass /buildbot http://localhost:8009
    ProxyPassReverse /buildbot http://localhost:8009

    <Location /buildbot>
        Order allow,deny
        Allow from all
    </Location>

    # prdb

    Alias /prdb /data/www/modules/prdb 
    <Directory "/data/www/modules/prdb/">
        Options +FollowSymLinks -Indexes
        AllowOverride None
        Order allow,deny
        Allow from all

       <FilesMatch "\.inc$">
          Order allow,deny
          allow from 127
          deny from all
       </FilesMatch>
   </Directory>

    # irc

    Alias /irc/meetbot /data/opt/supybot/config/meetbot
    Alias /irc/logs /data/opt/supybot/config/logs/ChannelLogger/freenode

    <Directory /data/opt/supybot/config/meetbot>
       Options Indexes FollowSymLinks
       AllowOverride All
       order allow,deny
       allow from all
    </Directory>

    <Directory /data/opt/supybot/config/logs/ChannelLogger/freenode>
       Options Indexes FollowSymLinks
       AllowOverride All
       order allow,deny
       allow from all
    </Directory>

</VirtualHost>

<IfDefine SSL>
<IfDefine !NOSSL>

##
## SSL Virtual Host Context
##

<VirtualHost *:443>

	#  General setup for the virtual host
	DocumentRoot "/srv/www/vhosts/linuxbase.org"
	ServerName www.linuxbase.org
	ServerAlias linuxbase.org
	ServerAdmin webmaster@linuxbase.org
	ErrorLog /var/log/apache2/linuxbase.org-error_log
	CustomLog /var/log/apache2/linuxbase.org-access_log combined

	<Directory "/srv/www/vhosts/linuxbase.org">
		Options Indexes FollowSymLinks
		AllowOverride None
		Order allow,deny
		Allow from all
	</Directory>

	RewriteEngine on

	# For now, just redirect the top page to the workgroup page.
	RewriteRule ^/?$ https://www.linuxfoundation.org/collaborate/workgroups/lsb

    RewriteRule ^/spec https://refspecs.linuxfoundation.org/lsb.shtml [L,R=301]

	Alias /dbadmin /data/www/modules/dbadmin
	Alias /navigator /data/www/modules/dbadmin

	<Directory /data/www/modules/dbadmin>
		Options +FollowSymLinks
		AllowOverride All
		order allow,deny
		allow from all

       # included files (especially config/connection.inc, which contains
       # site-specific passwords!!!) only need to be readable by the application,
       # not over the web, so mask them out
		<FilesMatch "\.inc$">
			Order allow,deny
			allow from 127
			deny from all
		</FilesMatch>

	</Directory>

	<Directory /data/www/modules/dbadmin/admin>
		# Disable (for now, perhaps permanently)
		Order allow,deny
		Deny from all
	</Directory>

	<Directory /data/www/modules/dbadmin/admin_community>
		Order allow,deny
		Deny from all
	</Directory>

    # download app

    ProxyPass /download http://localhost:7248
    ProxyPassReverse /download http://localhost:7248

    <Location /download>
        Order allow,deny
        Allow from all
    </Location>

	RewriteRule ^/buildbot$ /buildbot/ [L,R=301]
	ProxyPass /buildbot http://localhost:8009
	ProxyPassReverse /buildbot http://localhost:8009

	# lsb-cert

	Alias /lsb-cert /data/www/modules/lsb-cert

	<Directory /data/www/modules/lsb-cert>
		Options FollowSymLinks Indexes
		AllowOverride None
		Order allow,deny
		Allow from all
		php_value upload_max_filesize 200M
		php_value post_max_size 200M
	</Directory>

    # prdb

    Alias /prdb /data/www/modules/prdb 
    <Directory "/data/www/modules/prdb/">
        Options +FollowSymLinks -Indexes
        AllowOverride None
        Order allow,deny
        Allow from all

       <FilesMatch "\.inc$">
          Order allow,deny
          allow from 127
          deny from all
       </FilesMatch>
   </Directory>

    # irc

    Alias /irc/meetbot /data/opt/supybot/config/meetbot
    Alias /irc/logs /data/opt/supybot/config/logs/ChannelLogger/freenode

    <Directory /data/opt/supybot/config/meetbot>
       Options Indexes FollowSymLinks
       AllowOverride All
       order allow,deny
       allow from all
    </Directory>

    <Directory /data/opt/supybot/config/logs/ChannelLogger/freenode>
       Options Indexes FollowSymLinks
       AllowOverride All
       order allow,deny
       allow from all
    </Directory>

   SetEnv BZR_HOME /var/lib/wwwrun

	#   SSL Engine Switch:
	#   Enable/Disable SSL for this virtual host.
	SSLEngine on

	# 4 possible values: All, SSLv2, SSLv3, TLSv1. Allow TLS only:
	SSLProtocol all -SSLv2 -SSLv3

	#   SSL Cipher Suite:
	#   List the ciphers that the client is permitted to negotiate.
	#   See the mod_ssl documentation for a complete list.
	#
        #   formerly, this was set to the following:
	#   ### SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
	#
	#   We now disable weak ciphers by default.
	#   Please see the documentation via the links above, and
	#   "openssl ciphers -v" for a complete list of ciphers that are
	#   available.
	#
	# The following default should work with openssl running in FIPS
	# mode.
	#    OPENSSL_FORCE_FIPS_MODE=1 rcapache2 restart
	# will start the web server with FIPS mode in openssl.
	# For more information, please have a look at
	# /usr/share/doc/packages/openssl/README-FIPS.txt from the openssl
	# package.
	SSLCipherSuite ALL:!aNULL:!eNULL:!SSLv2:!RC4:!LOW:!EXP:!MD5:@STRENGTH

	#   Server Certificate:
	#   Point SSLCertificateFile at a PEM encoded certificate.  If
	#   the certificate is encrypted, then you will be prompted for a
	#   pass phrase.  Note that a kill -HUP will prompt again.  Keep
	#   in mind that if you have both an RSA and a DSA certificate you
	#   can configure both in parallel (to also allow the use of DSA
	#   ciphers, etc.)
	SSLCertificateFile /etc/letsencrypt/live/www.linuxbase.org/fullchain.pem
	#SSLCertificateFile /etc/apache2/ssl.crt/server-dsa.crt

	#   Server Private Key:
	#   If the key is not combined with the certificate, use this
	#   directive to point at the key file.  Keep in mind that if
	#   you've both a RSA and a DSA private key you can configure
	#   both in parallel (to also allow the use of DSA ciphers, etc.)
	SSLCertificateKeyFile /etc/letsencrypt/live/www.linuxbase.org/privkey.pem
	#SSLCertificateKeyFile /etc/apache2/ssl.key/server-dsa.key

	#   Server Certificate Chain:
	#   Point SSLCertificateChainFile at a file containing the
	#   concatenation of PEM encoded CA certificates which form the
	#   certificate chain for the server certificate. Alternatively
	#   the referenced file can be the same as SSLCertificateFile
	#   when the CA certificates are directly appended to the server
	#   certificate for convinience.
	SSLCertificateChainFile /etc/letsencrypt/live/www.linuxbase.org/fullchain.pem

	#   Certificate Authority (CA):
	#   Set the CA certificate verification path where to find CA
	#   certificates for client authentication or alternatively one
	#   huge file containing all of them (file must be PEM encoded)
	#   Note: Inside SSLCACertificatePath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCACertificatePath /etc/apache2/ssl.crt
	#SSLCACertificateFile /etc/apache2/ssl.crt/ca-bundle.crt

	#   Certificate Revocation Lists (CRL):
	#   Set the CA revocation path where to find CA CRLs for client
	#   authentication or alternatively one huge file containing all
	#   of them (file must be PEM encoded)
	#   Note: Inside SSLCARevocationPath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCARevocationPath /etc/apache2/ssl.crl
	#SSLCARevocationFile /etc/apache2/ssl.crl/ca-bundle.crl

	#   Client Authentication (Type):
	#   Client certificate verification type and depth.  Types are
	#   none, optional, require and optional_no_ca.  Depth is a
	#   number which specifies how deeply to verify the certificate
	#   issuer chain before deciding the certificate is not valid.
	#SSLVerifyClient require
	#SSLVerifyDepth  10

	#   Access Control:
	#   With SSLRequire you can do per-directory access control based
	#   on arbitrary complex boolean expressions containing server
	#   variable checks and other lookup directives.  The syntax is a
	#   mixture between C and Perl.  See the mod_ssl documentation
	#   for more details.
	#<Location />
	#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
	#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
	#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
	#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
	#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
	#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
	#</Location>

	#   SSL Engine Options:
	#   Set various options for the SSL engine.
	#   o FakeBasicAuth:
	#     Translate the client X.509 into a Basic Authorisation.  This means that
	#     the standard Auth/DBMAuth methods can be used for access control.  The
	#     user name is the `one line' version of the client's X.509 certificate.
	#     Note that no password is obtained from the user. Every entry in the user
	#     file needs this password: `xxj31ZMTZzkVA'.
	#   o ExportCertData:
	#     This exports two additional environment variables: SSL_CLIENT_CERT and
	#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
	#     server (always existing) and the client (only existing when client
	#     authentication is used). This can be used to import the certificates
	#     into CGI scripts.
	#   o StdEnvVars:
	#     This exports the standard SSL/TLS related `SSL_*' environment variables.
	#     Per default this exportation is switched off for performance reasons,
	#     because the extraction step is an expensive operation and is usually
	#     useless for serving static content. So one usually enables the
	#     exportation for CGI and SSI requests only.
	#   o CompatEnvVars:
	#     This exports obsolete environment variables for backward compatibility
	#     to Apache-SSL 1.x, mod_ssl 2.0.x, Sioux 1.0 and Stronghold 2.x. Use this
	#     to provide compatibility to existing CGI scripts.
	#   o StrictRequire:
	#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
	#     under a "Satisfy any" situation, i.e. when it applies access is denied
	#     and no other module can change it.
	#   o OptRenegotiate:
	#     This enables optimized SSL connection renegotiation handling when SSL
	#     directives are used in per-directory context. 
	#SSLOptions +FakeBasicAuth +ExportCertData +CompatEnvVars +StrictRequire
	<Files ~ "\.(cgi|shtml|phtml|php3?)$">
	    SSLOptions +StdEnvVars
	</Files>
	#<Directory "/srv/www/cgi-bin">
	#    SSLOptions +StdEnvVars
	#</Directory>

	#   SSL Protocol Adjustments:
	#   The safe and default but still SSL/TLS standard compliant shutdown
	#   approach is that mod_ssl sends the close notify alert but doesn't wait for
	#   the close notify alert from client. When you need a different shutdown
	#   approach you can use one of the following variables:
	#   o ssl-unclean-shutdown:
	#     This forces an unclean shutdown when the connection is closed, i.e. no
	#     SSL close notify alert is send or allowed to received.  This violates
	#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
	#     this when you receive I/O errors because of the standard approach where
	#     mod_ssl sends the close notify alert.
	#   o ssl-accurate-shutdown:
	#     This forces an accurate shutdown when the connection is closed, i.e. a
	#     SSL close notify alert is send and mod_ssl waits for the close notify
	#     alert of the client. This is 100% SSL/TLS standard compliant, but in
	#     practice often causes hanging connections with brain-dead browsers. Use
	#     this only for browsers where you know that their SSL implementation
	#     works correctly. 
	#   Notice: Most problems of broken clients are also related to the HTTP
	#   keep-alive facility, so you usually additionally want to disable
	#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
	#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
	#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
	#   "force-response-1.0" for this.
	#   remark: The below configuration snippet is here for illustration purposes.
	#           Browser specific deficiencies exist, but generally all of them
	#           should handle SSL/TLS encapsulated connections well.
	#SetEnvIf User-Agent ".*MSIE.*" \
	#	 nokeepalive ssl-unclean-shutdown \
	#	 downgrade-1.0 force-response-1.0

	#   Per-Server Logging:
	#   The home of a custom SSL log file. Use this when you want a
	#   compact non-error SSL logfile on a virtual host basis.
	#CustomLog /var/log/apache2/ssl_request_log   ssl_combined

</VirtualHost>                                  

</IfDefine>
</IfDefine>

